package shodan

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type HostLocation struct {
	City        string `json":"city"`
	RegionCode  string `json:"region_code"`
	AreaCode    int    `json:"area_code"`
	CountryName string `json:"country_name"`
	PostalCode  int    `json:"postal_code"`
	CountryCode string `json:"country_code"`
}

type Host struct {
	Org            string       `json:"org"`
	ASN            string       `json:"asn"`
	IPString       string       `json:"ip_str"`
	Port           int64        `json:"port"`
	Transport      string       `json:"transport"`
	Hostname       []string     `json:"hostnames"`
	Domains        []string     `json:"domains"`
	Product        string       `json:"product"`
	ProductVersion string       `json:"version"`
	Location       HostLocation `json:"location"`
}

type HostSearch struct {
	Matches []Host `json:"matches"`
}

func (s *Client) HostSearch(q string) (*HostSearch, error) {

	resp, err := http.Get(fmt.Sprintf("%s/shodan/host/search?key=%s&query=%s", BaseUrl, s.apiKey, q))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var ret HostSearch
	if err := json.NewDecoder(resp.Body).Decode(&ret); err != nil {
		return nil, err
	}
	return &ret, nil
}
