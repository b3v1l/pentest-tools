package main

import (
	"errors"
	"flag"
	"fmt"
	"os"

	"github.com/miekg/dns"
)

type result struct {
	IPaddr   string
	Hostname string
}

func resolvA(fqdn, dnServer string) ([]string, error) {

	var m dns.Msg
	var ips []string
	m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)
	r, err := dns.Exchange(&m, dnServer)
	if err != nil {
		return ips, err //panic(err)
	}
	for _, answer := range r.Answer {
		if a, ok := answer.(*dns.A); ok {
			ips = append(ips, a.A.String())
		}
	}
	return ips, nil
}

func resolvCname(fqdn, dnServer string) ([]string, error) {

	var m dns.Msg
	var fqdns []string
	m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)
	r, err := dns.Exchange(&m, dnServer)
	if err != nil {
		return fqdns, err //panic(err)
	}
	if len(r.Answer) < 1 {
		return fqdns, errors.New("No answer")
	}

	for _, answer := range r.Answer {
		if a, ok := answer.(*dns.CNAME); ok {
			fqdns = append(fqdns, a.Target)
		}
	}
	return fqdns, nil
}

func main() {
	var (
		OptDomain    = flag.String("domain", "", "Target Domain - mydomain.com")
		OptWordlist  = flag.String("wordlist", "", "Wordlist to bruteforce")
		OptWorker    = flag.Int("c", 100, "Numer of workers")
		OptDnsServer = flag.String("dnsserver", "", "DNS server")
	)

	flag.Parse()
	if *OptDomain == "" || *OptWordlist == "" || *OptDnsServer == "" {
		fmt.Println("Option required")
		os.Exit(1)
	}
	fmt.Println(*OptWorker, *OptDnsServer)

}
