package main

import (
	"io"
	"log"
	"net"
)

func redirect(src net.Conn) {

	//conf := &tls.Config{
	//	InsecureSkipVerify: true,
	//	MinVersion:         tls.VersionTLS10,
	//}
	//set up the address blocked by the proxy
	dst, err := net.Dial("tcp", "permisbateauonline.com:80")
	if err != nil {
		log.Fatalln("Host unreachable")
	}
	defer dst.Close()

	// use goroutine to avoid blocking issues with io.Copy
	go func() {
		//copy the src data to the dst site
		if _, err := io.Copy(dst, src); err != nil {
			log.Fatalln(err)
		}
	}()
	//copy data back from dst to src
	if _, err := io.Copy(src, dst); err != nil {
		log.Fatalln(err)
	}

}

func main() {

	//set up the listener
	listener, err := net.Listen("tcp", ":8888")
	if err != nil {
		log.Fatalln("Cannot bind port")
	}
	log.Println("Listening on port 8888")
	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Fatalln("Unable to accept connection")
		}
		log.Printf("Recevied connection ... trying to redirect\n", conn)
		//call the redirect function in a goroutine
		go redirect(conn)
	}
}
