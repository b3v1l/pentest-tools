package main

import (
	"archive/zip"
	"bytes"
	"crypto/tls"
	"fmt"
	"golang-projects/pentest-tools/scrapfiles/metadata"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/PuerkitoBio/goquery"
)

func pageScrape(s string) {
	// Request the HTML page.
	res, err := http.Get(s)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	if res.StatusCode != 200 {
		log.Fatalf("status code error: %d %s", res.StatusCode, res.Status)
	}

	// Load the HTML document
	doc, err := goquery.NewDocument(s)

	if err != nil {
		log.Fatal(err)
	}
	//u := "html body div#b_content ol#b_results li.b_algo h2"
	// bing page pattern location in DOM
	u := "ul > li > a.b_widePag"
	// Find the review items
	doc.Find(u).Each(func(i int, s *goquery.Selection) {
		//fmt.Printf("%v", test)
		a, ok := s.Attr("href")

		if !ok {
			return
			//log.Println("[-] doesn't exist")
		}
		if a == "/+" {
			fmt.Println("[-] here comes the +")
		}

		urls := fmt.Sprintf("http://www.bing.com/"+"%s", a)
		doc, err := goquery.NewDocument((urls))
		if err != nil {
			log.Panicln(err)
		}
		pattern := "html body div#b_content ol#b_results li.b_algo h2"

		doc.Find(pattern).Each(handler)

	})

}

//return

func handler(i int, s *goquery.Selection) {
	url, ok := s.Find("a").Attr("href")
	if !ok {
		return
	}
	// Disable certificats check (in case of bad certificat)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	fmt.Printf("\n%d: %s\n", i, url)
	res, err := http.Get(url)
	if err != nil {
		//fmt.Println("polo")
		log.Panicln(err)
	}

	buf, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return
	}
	defer res.Body.Close()

	r, err := zip.NewReader(bytes.NewReader(buf), int64(len(buf)))
	if err != nil {

		return
		//		log.Panicln(err)
	}

	cp, app, err := metadata.NewProperties(r)
	if err != nil {
		return
	}

	fmt.Printf(
		"  Creator: %10s  LastEdited: %10s  Office Version: %s\n",
		cp.Creator,
		cp.LastModifiedBy,
		//app.AppVersion,
		//"Office ",
		app.GetOfficeVersion())
}

func main() {
	if len(os.Args) < 3 {
		log.Fatalln("usage: prog domain ext ")

	}
	domain := os.Args[1]
	ext := os.Args[2]

	q := fmt.Sprintf(
		"site:%s && filetype:%s && instreamset:(url title):%s", domain, ext,
		ext)

	//search := fmt.Sprintf("http://www.bing.com/search?q=%s&first=%d&FORM=PERE", url.QueryEscape(q), i)
	search := fmt.Sprintf("http://www.bing.com/search?q=%s", url.QueryEscape(q))

	//}
	pageScrape(search)
}

//body, .b_promoteText, #b_tween a.ftrH, #b_tween a.ftrH:hover, .b_expando, .b_expando h2, .b_active a, .b_active a:visited, .b_active a:hover, #b_results > .b_pag a, #b_results .b_no, #b_content a.cbl:visited, #b_content a.cbl
