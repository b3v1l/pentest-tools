package metadata

import (
	"archive/zip"
	"encoding/xml"
	"fmt"
	"strings"
)

type OfficeCoreProperty struct {
	XMLName        xml.Name `xml:"coreProperties"`
	Creator        string   `xml:"creator"`
	LastModifiedBy string   `xml:"lastModifiedBy"`
}

type OfficeAppProperty struct {
	XMLName     xml.Name `xml:"Properties"`
	Application string   `xml:"application"`
	Company     string   `xml:"company"`
	AppVersion  string   `xml:"AppVersion"`
}

var OfficeVersion = map[string]string{
	"16": "2016",
	"15": "2013",
	"14": "2010",
	"12": "2007",
	"11": "2003",
}

func (a *OfficeAppProperty) GetOfficeVersion() string {

	version := strings.Split(a.AppVersion, ".")
	if len(version) < 2 {
		return "Unknown Version"
	}
	v, t := OfficeVersion[version[0]]
	if !t {
		return "Unknown Version"
	}
	return v
}

func NewProperties(r *zip.Reader) (*OfficeCoreProperty, *OfficeAppProperty, error) {

	var offapp OfficeAppProperty
	var offcore OfficeCoreProperty

	for _, v := range r.File {
		switch v.Name {
		case "docProps/core.xml":
			if err := process(v, &offcore); err != nil {
				//continue
				return nil, nil, err
			}
		case "docProps/app.xml":
			if err := process(v, &offapp); err != nil {
				return nil, nil, err
			}
		default:
			continue
		}
	}
	return &offcore, &offapp, nil
}

func process(f *zip.File, prop interface{}) error {
	rc, err := f.Open()
	if err != nil {
		fmt.Println("process error")
		return err
	}
	defer rc.Close()

	if err := xml.NewDecoder(rc).Decode(&prop); err != nil {
		fmt.Println("process error")
		return err
	}
	//	fmt.Println("process")
	return nil
}
